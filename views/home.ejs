<!DOCTYPE html>

<html>
<head>
  <link rel="stylesheet" href="../styles.css">
    <title>React App Demo</title>

    <script src="https://unpkg.com/react@17/umd/react.development.js"></script>
    <script src="https://unpkg.com/react-dom@17/umd/react-dom.development.js"></script>

    <!-- Don't use this in production: -->
    <script     src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
  
</head>

<body>
<div id="root"></div>
<script type="text/babel">

const AlbumGroup = (props) => {
  const albumList = props.albums.map((album) => <li key={album._id} onClick={props.clickHandler}>{album.title}</li>);
  return <ul>{albumList}</ul>
}

  const Detail = (props) => {
    return (
      <div>
      <h2>Album details:</h2>
        {props.item &&
          <form>
            <b>Title:</b> <input type="text" name="title" onChange={props.changeHandler} value={props.item.title || ''} />
            <b>Artist:</b> <input type="text" name="artist" onChange={props.changeHandler} value={props.item.artist || ''} />
            <b>Year:</b> <input type="text" name="year" onChange={props.changeHandler} value={props.item.year || ''} />
            <b>Label:</b> <input type="text" name="label" onChange={props.changeHandler} value={props.item.label || ''} />  


            <button type="button" onClick={props.saveHandler}>Save</button>
            <button type="button" onClick= {props.clearHandler}>Clear</button>
            <button type="button" onClick={props.deleteHandler}>Delete</button>
          </form>
        }
        </div>
    )
  }

const App = () => {

  // MAY19
  const [items, setItems] = React.useState([]);
  const [selectedItem, setSelectedItem] = React.useState();

  // MAY19
  React.useEffect(() => {
    const fetchData = async () => {
      try {
        const response = await fetch('/api/albums');
        const data = await response.json();
        setItems(data);
      } catch (error) {
        console.error('Data retrieval error:', error);
      }
    };
    // MAY19
    fetchData();
  }, []);

  // MAY19
  const itemClicked = (e) => {
    let found = items.find((item) => item.title === e.target.innerText);
    setSelectedItem(found);
  }

  const itemChanged = (e) => {
    let field = e.target.name;
    let newItem = { ...selectedItem };
    newItem[field] = e.target.value;

    // MAY19
    setSelectedItem(newItem);
    setItems(prevItems => prevItems.map(item => item._id === newItem._id ? newItem : item));
  
  }

  const clearFields = () => {
    setSelectedItem({
      title: "",
      artist: "",
      year: "",
      label: ""
    });
  };

  // MAY19
  const saveHandler = async () => {
    if (!selectedItem) return;

    try {
      const response = await fetch(`/api/albums`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(selectedItem)
      });

      if (response.ok) {
        const savedItem = await response.json();
        setItems(prevItems => {
          if (selectedItem._id) {
            return prevItems.map(item => item._id === savedItem._id ? savedItem : item);
          } else {
            return [...prevItems, savedItem];
          }
        });
        setSelectedItem(savedItem);
      } else {
        console.error('Save error:', response.statusText);
      }
    } catch (error) {
      console.error('Save error:', error);
    }
  };

  // MAY19
  const deleteHandler = async () => {
    if (!selectedItem || !selectedItem._id) return;

    try {
      const response = await fetch(`/api/albums/${selectedItem._id}`, {
        method: 'DELETE'
      });

      if (response.ok) {
        setItems(prevItems => prevItems.filter(item => item._id !== selectedItem._id));
        clearFields();
      } else {
        console.error('Deletion error:', response.statusText);
      }
    } catch (error) {
      console.error('Deletion error:', error);
    }
  };
  
  return (
    <div>
      <h1>Classic Avant-Garde Jazz Albums</h1>
      <AlbumGroup albums={items} clickHandler={itemClicked}/>
      <hr />
      <Detail item={selectedItem} changeHandler={itemChanged} saveHandler={saveHandler} clearHandler={clearFields} deleteHandler={deleteHandler} />
    </div>
    );
  }
  
ReactDOM.render(<App />, document.getElementById("root"));

</script>
</body>
</html>


