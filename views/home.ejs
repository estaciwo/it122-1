<!DOCTYPE html>

<html>
<head>
  <meta charset="utf-8">
  <link rel="stylesheet" href="../styles.css">
  <title>React App Demo</title>

  <script src="https://unpkg.com/react@18/umd/react.development.js"></script>
  <script src="https://unpkg.com/react-dom@18/umd/react-dom.development.js"></script>
  <!--  don't use this in production -->
    <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
</head>

<body>
  <h1>1960s Avant-Garde Jazz Albums</h1>
  <div id="root"></div>

  <script type="text/babel">

    const ItemList = (props) => {
      const listItems = props.data.map((item) =>
        <li key={item._id} id={item._id} onClick={props.clickHandler}>
          {item.title}
        </li>);
      return <ul>{listItems}</ul>;
    };

    const ItemDetail = (props) => {
      return <div>
        <hr />
        <h3><em>Album details:</em></h3>
        <form>
          title: <input type="text" name="title" value={props.item.title || ""} onChange={props.handleChange} /><br />
          artist: <input type="text" name="artist" value={props.item.artist || ""} onChange={props.handleChange} /><br />
          year: <input type="text" name="year" value={props.item.year || ""} onChange={props.handleChange} /><br />
          label: <input type="text" name="label" value={props.item.label || ""} onChange={props.handleChange} /><br />
          ID: <input type="text" name="id" value={props.item._id || ""} readOnly /><br />
        </form>
        <button name="save" onClick={props.saveItem}>Save</button>&nbsp;
        <button name="clear" onClick={props.clearForm}>Clear</button>&nbsp;
        <button name="delete" onClick={props.deleteItem}>Delete</button>&nbsp;
      </div>
    };

    const App = () => {
      const [items, setItems] = React.useState([]);
      const [currentItem, setCurrentItem] = React.useState({});
      const [formItem, setFormItem] = React.useState({});

      React.useEffect(() => {
        const fetchData = async () => {
          try {
            const response = await fetch("/api/v1/albums");
            const data = await response.json();
            setItems(data);
          } catch (error) {
            console.error("Error fetching data:", error);
          }
        };
        fetchData();
      }, []);

      const selectItem = (event) => {
        const found = items.find((item) => item._id === event.target.id);
        setCurrentItem(found);
        setFormItem(found);
      };

      const clearForm = () => {
        setFormItem({});
      };

      const saveItem = () => {
        if (!formItem.title || formItem.title.trim() === "") {
          alert("Title field cannot be empty.");
          return;
        }

        fetch("/api/v1/add/", {
          method: "POST",
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(formItem)
        })
          .then(res => res.json())
          .then((data) => {
            if (!formItem._id) {
              formItem._id = data._id;
              let newItems = [...items, formItem];
              setItems(newItems);
            } else {
              let updatedItems = items.map(item => item._id === formItem._id ? formItem : item);
              setItems(updatedItems);
            }
            setCurrentItem(formItem);
          });
      };

      const deleteItem = () => {
        let id = currentItem._id;
        const title = currentItem.title;

        fetch(`/api/v1/delete/${id}`)
          .then(res => res.json())
          .then((data) => {
            if (data.deleted && data.deleted.deletedCount > 0) {
              const newItems = items.filter(item => item._id !== id);
              setItems(newItems);
              setCurrentItem({});
              setFormItem({});
            }
          });
      };

      const handleChange = (event) => {
        let newItem = { ...formItem };
        newItem[event.target.name] = event.target.value;
        setFormItem(newItem);
      };

      return (
        <div>
          <h2>Albums Inventory</h2>
          <ItemList data={items} clickHandler={selectItem} />
          <ItemDetail
            item={formItem}
            handleChange={handleChange}
            clearForm={clearForm}
            saveItem={saveItem}
            deleteItem={deleteItem}
          />
        </div>
      );
    };

    const container = document.getElementById('root');
    const root = ReactDOM.createRoot(container);
    root.render(<App />);

  </script>
</body>
</html>
